--[[Lua IO 操作]]

local testFunc()
	--1.简单IO模型

	--设置当前输入流
	io.input("fileName")  --把 fileName文件 作为当前输如流，接下来的操作均针对该文件，除非再次调用input
	
	local aT = io.read("*all") --<建议模式>读取一整个文件
	local lT = io.read("line") --<默认模式>读取当前位置的下一行,单不包括 换行度，到末尾return nil
	local nValue = io.read("*number")  --从当前文件读取一个数子，并且返回一个数字
	
	--读取所有行
	local resultLines = {}
	for line in io.lines do
		resultLines[#resultLines+1] = line
	end
	table.concat(resultLines,"\n")


	--2.完整IO模型,基于句柄式的
	local fHandler = io.open("fileName","w")  -- 文件名字，打开模式
	local t = fHandler:read("*all")
	fHandler:close() --这个很重要，一定要记得关闭

	--预留的三个C语言句柄
	-- io.stdin:write() io.stdout io.stderr

	--3.性能小技巧
	--[[
		a. 小文件：一次性读取 优于 逐行读取
		b. 大文件：逐块读取
			local lines,reset = f:read(BUffSize,"*line")
			reset 保存被块分割的那行的剩余部分
	]]


	--4.二进制文件的读取
	local fHandler = io.open("fineName","wb")
	local data = fHandler:read("*all") --二进制文件建议按照该模式读取，也可以按照字节数读取


	--5.其他文件操作
	local offset = fHandler:seek(where,offset) --设置文件位置的偏移量，返回值总是针对文件起点的偏移量
	--[[
		where="set" ,offset = 相当于文件起点的偏移量
		where="cur" ,offset = 相当于文件当前点的偏移量
		where="end" ,offset = 相当于文件结尾的偏移量
	]]
	
	6.lua 处理汉字字符
	local len  = #convertStr
	    printLog("convertStr:  ",convertStr.."  " .. len)
	    local left = 0
	    local arr  = {0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc}
	    local strTb = {}
	    local start = 1
	    local wordLen = 0
	    while len ~= left do
	        local tmp = string.byte(convertStr, start)
	        printLog("tmp:  ", tmp)
	        local i   = #arr
	        while arr[i] do
	            if tmp >= arr[i] then
	                break
	            end
	            i = i - 1
	        end
	        wordLen = i + wordLen
	        local tmpString = string.sub(convertStr, start, wordLen)
	        printLog("tmpString:  ", tmpString.."  " .. tostring(#tmpString))
	        start = start + i
	        left = left + i
	        strTb[#strTb + 1] = tmpString
	    end

	
	7.Lua 构造原理
	a.Lua 中的create 定义在 function.lua 中的 class函数中
	b.调用class(),class内部调用 new() ,new内部调用 ctor() ，所以每一个lua对象构造的时候，直接调用create即可执行到 ctor()
	
	
end
