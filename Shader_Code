
1. gray Shader
  //vsh
    attribute vec4 a_position; 
    attribute vec2 a_texCoord; 
    attribute vec4 a_color; 
    varying vec4 v_fragmentColor; 
    varying vec2 v_texCoord;    
    void main() 
    {                           
        gl_Position = CC_PMatrix   * a_position; 
        v_fragmentColor = a_color; 
        v_texCoord = a_texCoord; 
    }
    
    //fsh
    #ifdef GL_ES  
     precision mediump float;  
    #endif  
    varying vec2 v_texCoord; 
    varying vec4 v_fragmentColor;  
    void main(void)  
    {   
     // Convert to greyscale using NTSC weightings  
       vec4 col = v_fragmentColor * texture2D(CC_Texture0, v_texCoord); 
       float grey = dot(col.rgb, vec3(0.22, 0.55, 0.11)); 
       gl_FragColor = vec4(grey, grey, grey, col.a); 
    }
    
    
    
  2.描边shader
  
    //vsh
    vshSource = attribute vec4 a_position;                          
  		attribute vec2 a_texCoord;                          
  		attribute vec4 a_color;                          
  		#ifdef GL_ES                          
  		varying lowp vec4 v_fragmentColor;                                  
  		varying mediump vec2 v_texCoord;                          
  		#else                          
  		varying vec4 v_fragmentColor;                          
  		varying vec2 v_texCoord;                          
  		#endif                          
  		void main()                          
  		{                          
  		    gl_Position = CC_PMatrix * a_position;                          
  		    v_fragmentColor = a_color;                          
  		    v_texCoord = a_texCoord;                          
  		}
      
      //fsh
      fragSource = varying vec2 v_texCoord;                                            
  		varying vec4 v_fragmentColor;                                           
  		uniform vec3 u_outlineColor;                                           
  		uniform float u_threshold;                                           
  		uniform float u_radius;                                           
  		void main()                                           
  		{                                           
  		    float radius = u_radius;                                           
  		    vec4 accum = vec4(0.0);                                           
  		    vec4 normal = vec4(0.0);                                           
  		    normal = texture2D(CC_Texture0, vec2(v_texCoord.x, v_texCoord.y));                                           
  		    accum += texture2D(CC_Texture0, vec2(v_texCoord.x - radius, v_texCoord.y - radius));                                           
  		    accum += texture2D(CC_Texture0, vec2(v_texCoord.x + radius, v_texCoord.y - radius));                                           
  		    accum += texture2D(CC_Texture0, vec2(v_texCoord.x + radius, v_texCoord.y + radius));                                           
  		    accum += texture2D(CC_Texture0, vec2(v_texCoord.x - radius, v_texCoord.y + radius));                                           
  		    accum *= u_threshold;                                           
  		    accum.rgb =  u_outlineColor * accum.a;                                           
  		    normal = ( accum * (1.0 - normal.a)) + (normal * normal.a);                                           
  		    gl_FragColor = v_fragmentColor * normal;                                           
  		}
    
