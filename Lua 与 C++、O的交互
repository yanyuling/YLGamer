1. lua和OC直接进行数据交互，lua和Java的数据交互，先通过lua与C++交互，然后C++和Java通过
	JNI进行数据交互

2. C++与Lua的常规数据交互，流程如下
	1. lua端注册的函数句柄，就可以通过 handler = ScriptHandlerMgr::getInstance()->getObjectHandler( ) 获取到
	2. 通过 CommonScriptData 构建传递到lua层面的数据， <可根据自己事件的类型选择不同
		的数据类型，详细参考引擎使用>
	3. 利用上一步的数据构建 ScriptEvent		<可根据自己事件的类型选择不同的数据
		类型，详细参考引擎使用>
	4. 再通过 发送事件<事件携带了数据哦~> ScriptEngineManager::getInstance()->getScriptEngine()->sendEvent(&event);


3. C++ 执行Lua之后的函数示例
	
	static int SendBinaryMessageToLua(int nHandler, int nProtocol, const char* pBytes)
	{
		if (nHandler <= 0) 
		{
			return 0;
		}
	
		if (nullptr == ScriptEngineManager::getInstance()->getScriptEngine()) 
		{
			return 0;
		}
	
		LuaStack *pStack = LuaEngine::getInstance()->getLuaStack();
		if (nullptr == pStack) 
		{
			return 0;
		}
	
		lua_State *tolua_s = pStack->getLuaState();
		if (nullptr == tolua_s) 
		{
			return 0;
		}
	
		int nRet = 0;
	
		pStack->pushInt(nProtocol);
		pStack->pushString(pBytes);
	
		nRet = pStack->executeFunctionByHandler(nHandler, 2);
		pStack->clean();
		return nRet;
	}


4. engine->executeScriptFile("src/main.lua")  //Lua 执行给定文件中的代码

    /*Execute script code contained in the given string*/
    
    virtual int executeString(const char* codes) override;
   
    /*
     * Execute a scripted global function.
     * The function should not take any parameters and should return an integer.
     *
     * @param functionName String object holding the name of the function, in the global script environment, that is to be executed.
     * @return The integer value returned from the script function.
     */
     
   virtual int executeGlobalFunction(const char* functionName) override;
   
